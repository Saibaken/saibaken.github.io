{"version":3,"file":"static/js/116.94a370e5.chunk.js","mappings":"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","sources":["apps/todo/hooks/hooks.ts","apps/todo/store/todosAPI.ts","apps/todo/components/TodoItem/TodoItem.tsx","apps/todo/components/TodoList/TodoList.tsx","apps/todo/components/TodoInput/TodoInput.tsx","apps/todo/App.tsx","apps/todo/store/todosSlice.ts","apps/todo/store/index.ts","apps/todo/store/store.ts","apps/todo/index.tsx"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"../store/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>() \r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector; \r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Todo, TodoState } from \"../types/todoTypes\";\r\n\r\nexport const getTodos = createAsyncThunk<\r\n  Todo[],\r\n  undefined,\r\n  { rejectValue: string }\r\n>(\"todos/getTodos\", async function (_, { rejectWithValue }) {\r\n  const response = await fetch(\r\n    \"https://jsonplaceholder.typicode.com/todos?_limit=15\"\r\n  );\r\n  if (!response.ok) return rejectWithValue(\"Can't get todos, server error\");\r\n  return (await response.json()) as Todo[];\r\n});\r\n\r\nexport const postTodo = createAsyncThunk<Todo, string, { rejectValue: string }>(\r\n  \"todos/postTodo\",\r\n  async (title, { rejectWithValue }) => {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/todos\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        userId: 1,\r\n        title,\r\n        completed: false,\r\n      }),\r\n    });\r\n    if (!response.ok) return rejectWithValue(\"Can't make todo, server error\");\r\n    return (await response.json()) as Todo;\r\n  }\r\n);\r\n\r\nexport const toggleTodo = createAsyncThunk<\r\n  Todo,\r\n  number,\r\n  { rejectValue: string; state: { todos: TodoState } }\r\n>(\"todos/toggleTodo\", async (id, { rejectWithValue, getState }) => {\r\n  const todo: Todo | undefined = getState().todos.list.find(\r\n    (todo) => todo.id === id\r\n  );\r\n  if (todo) {\r\n    const response = await fetch(\r\n      `https://jsonplaceholder.typicode.com/todos/${todo.id}`,\r\n      {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          completed: !todo.completed,\r\n        }),\r\n      }\r\n    );\r\n    if (!response.ok) return rejectWithValue(\"Can't update todo, server error\");\r\n    return (await response.json()) as Todo;\r\n  }\r\n  return rejectWithValue(\"Can't find todo\");\r\n});\r\n\r\nexport const deleteTodo = createAsyncThunk<\r\n  Todo,\r\n  number,\r\n  { rejectValue: string, state: { todos: TodoState } }\r\n>(\"todos/deleteTodo\", async (id, { rejectWithValue, getState }) => {\r\n  const todo = getState().todos.list.find((todo) => todo.id === id);\r\n  if (todo) {\r\n    const response = await fetch(\r\n      `https://jsonplaceholder.typicode.com/todos/${todo.id}`,\r\n      {\r\n        method: \"DELETE\",\r\n      }\r\n    );\r\n    if (!response.ok) return rejectWithValue(\"Can't delete todo, server error\");\r\n    return todo;\r\n  }\r\n  return rejectWithValue(\"Can't find todo\");\r\n});\r\n","import React from 'react'\r\nimport { useAppDispatch } from '../../hooks/hooks'\r\nimport { deleteTodo, toggleTodo } from '../../store/todosAPI';\r\nimport { Todo } from '../../types/todoTypes'\r\nimport classNames from 'classnames';\r\nimport './TodoItem.css'\r\n\r\n\r\nconst TodoItem: React.FC<Todo> = (todo) => {\r\n  const dispatch = useAppDispatch();\r\n  const id = todo.id;\r\n  const handleButton = () => {\r\n    dispatch(deleteTodo(id))\r\n  }\r\n\r\n  const handleCheckbox = () => {\r\n    dispatch(toggleTodo(id));\r\n  }\r\n\r\n  return (\r\n      <li className={classNames('todo-item', {'todo-item_done': todo.completed})}>\r\n        <input className='todo-item__checkbox' type=\"checkbox\" id={String(todo.id)} onChange={handleCheckbox} checked={todo.completed}/>\r\n        <h3 className='todo-item__title' >{todo.title}</h3>\r\n        <button className='todo-item__delete' onClick={handleButton}>‚ùå</button>\r\n      </li>\r\n  )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react'\r\nimport { useAppSelector } from '../../hooks/hooks'\r\nimport TodoItem from '../TodoItem/TodoItem'\r\nimport './TodoList.css'\r\n\r\nexport default function TodoList() {\r\n    const todos = useAppSelector(state => state.todos.list);\r\n\r\n  return (\r\n    <ul className='todo-list'>\r\n        {todos.map(todo => {\r\n            return (\r\n                <TodoItem key={todo.id} {...todo}/>\r\n            )\r\n        })}\r\n    </ul>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './TodoInput.css'\r\n\r\ntype TodoInputProps = {\r\n    value: string;\r\n    updateValue: (str: string) => void;\r\n    handleSubmit: () => void;\r\n}\r\n\r\nconst TodoInput: React.FC<TodoInputProps> = ({ value, updateValue, handleSubmit }) => {\r\n    return (\r\n        <div className='todo-input'>\r\n            <input className='todo-input__input-field' type=\"text\" value={value} onChange={(e) => updateValue(e.target.value)} />\r\n            <button className='todo-input__submit-button' onClick={handleSubmit}>Add Todo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport { useAppDispatch, useAppSelector } from './hooks/hooks'\nimport { useEffect, useState } from 'react'\nimport { getTodos, postTodo } from './store/todosAPI';\nimport TodoInput from './components/TodoInput/TodoInput';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const dispatch = useAppDispatch();\n  const { loading, error } = useAppSelector(state => state.todos);\n\n  const updateValue = (str: string) => {\n    setInput(str);\n  }\n\n  const handleSubmit = () => {\n    if (input.trim().length) {\n      dispatch(postTodo(input.trim()));\n      setInput('');\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getTodos())\n  }, [dispatch])\n\n  if (loading) return <h2>Loading...</h2>\n  if (error) return <h2>Error</h2>\n\n  return (\n    <div className='todo-container'>\n      <div className='todo-inner-container'>\n        <TodoInput value={input} updateValue={updateValue} handleSubmit={handleSubmit} />\n        <TodoList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { AnyAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { TodoState } from \"../types/todoTypes\";\r\nimport { deleteTodo, getTodos, postTodo, toggleTodo } from \"./todosAPI\";\r\n\r\nconst initialState: TodoState = {\r\n  list: [],\r\n  loading: false,\r\n  error: undefined,\r\n};\r\n\r\nconst isError = (action: AnyAction) : boolean => {\r\n  return action.type.endsWith('rejected');\r\n}\r\n\r\nconst isPending = (action: AnyAction) : boolean => {\r\n  return action.type.endsWith('pending');\r\n}\r\n\r\nconst todosSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getTodos.fulfilled, (state, action) => {\r\n        state.list = action.payload;\r\n        state.error = undefined;\r\n        state.loading = false;\r\n      })\r\n      .addCase(postTodo.fulfilled, (state, action) => {\r\n        state.list.push(action.payload);\r\n        state.error = undefined;\r\n        state.loading = false;\r\n      })\r\n      .addCase(toggleTodo.fulfilled, (state, action) => {\r\n        const toggledTodo = state.list.find(todo => todo.id === action.payload.id);\r\n        if (toggledTodo) {\r\n          toggledTodo.completed = !toggledTodo.completed;\r\n        }\r\n        state.error = undefined;\r\n        state.loading = false;\r\n      })\r\n      .addCase(deleteTodo.fulfilled, (state, action) => {\r\n        state.list = state.list.filter(todo => todo.id !== action.payload.id);\r\n        state.error = undefined;\r\n        state.loading = false;\r\n      })\r\n      .addMatcher(isError, (state, action: PayloadAction<string>) => {\r\n        state.error = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addMatcher(isPending, (state) => {\r\n        state.error = undefined;\r\n        state.loading = true;\r\n      })\r\n  },\r\n});\r\n\r\nexport default todosSlice.reducer;","import store from \"./store\";\r\n\r\nexport default store;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todosReducer from \"./todosSlice\"\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        todos: todosReducer,\r\n    },\r\n})\r\n\r\nexport default store;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport App from './App';\nimport './index.css';\nimport { Provider }  from \"react-redux\"\nimport store from './store'\n\nconst TodoApp = () => <Provider store={store}><App/></Provider>\n\nexport default TodoApp;"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","getTodos","createAsyncThunk","_","rejectWithValue","fetch","response","ok","json","postTodo","title","method","headers","body","JSON","stringify","userId","completed","toggleTodo","id","getState","todo","todos","list","find","deleteTodo","dispatch","className","classNames","type","String","onChange","checked","onClick","TodoList","state","map","value","updateValue","handleSubmit","e","target","useState","input","setInput","loading","error","useEffect","str","trim","length","initialState","undefined","isError","action","endsWith","isPending","todosSlice","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","payload","push","toggledTodo","filter","addMatcher","configureStore","reducer","todosReducer","store"],"sourceRoot":""}